/* Generated By:JavaCC: Do not edit this line. CmdParserTokenManager.java */
package atan.parser;

public class CmdParserTokenManager implements CmdParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000002000L) != 0L)
            return 27;
         if ((active0 & 0x8003801f0bfdc00L) != 0L)
         {
            jjmatchedKind = 60;
            return 50;
         }
         if ((active0 & 0x80006000000000L) != 0L)
            return 54;
         if ((active0 & 0x8000002000000L) != 0L)
            return 2;
         if ((active0 & 0x40000000000000L) != 0L)
            return 41;
         if ((active0 & 0x7c01805400000L) != 0L)
            return 50;
         if ((active0 & 0x60600000000L) != 0L)
         {
            jjmatchedKind = 60;
            return 9;
         }
         if ((active0 & 0x10000008000000L) != 0L)
            return 18;
         return -1;
      case 1:
         if ((active0 & 0x801fe1ff7fffc00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 50;
         }
         if ((active0 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 53;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0x800000000802000L) != 0L)
            return 50;
         if ((active0 & 0x1fe1ff77fdc00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active0 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 59;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return 15;
         }
         if ((active0 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 3;
            }
            return 58;
         }
         if ((active0 & 0x1e1705400L) != 0L)
            return 50;
         if ((active0 & 0x1fe1e160f8800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return 50;
         }
         return -1;
      case 4:
         if ((active0 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 57;
         }
         if ((active0 & 0x1fe1fff0b8800L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x40000L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active0 & 0x1f87fff0a0800L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active0 & 0x60000018000L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0xc00008020000L) != 0L)
            return 50;
         if ((active0 & 0x1387ff7080800L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return 50;
         }
         return -1;
      case 7:
         if ((active0 & 0x1b87ff7080800L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 50;
         }
         return -1;
      case 8:
         if ((active0 & 0x1807e62080000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 50;
         }
         if ((active0 & 0x380195000800L) != 0L)
            return 50;
         return -1;
      case 9:
         if ((active0 & 0x60080000L) != 0L)
            return 50;
         if ((active0 & 0x1807e02000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
            return 50;
         }
         return -1;
      case 10:
         if ((active0 & 0x6600000000L) != 0L)
            return 50;
         if ((active0 & 0x1801802000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 10;
            return 50;
         }
         return -1;
      case 11:
         if ((active0 & 0x1801802000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 11;
            return 50;
         }
         return -1;
      case 12:
         if ((active0 & 0x1001800000000L) != 0L)
            return 50;
         if ((active0 & 0x800002000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 12;
            return 50;
         }
         return -1;
      case 13:
         if ((active0 & 0x800002000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 13;
            return 50;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 14;
            return 50;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 50;
         return -1;
      case 15:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 15;
            return 50;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 16;
            return 50;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 17;
            return 50;
         }
         return -1;
      case 18:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 18;
            return 50;
         }
         return -1;
      case 19:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 19;
            return 50;
         }
         return -1;
      case 20:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 20;
            return 50;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 58);
      case 40:
         return jjStopAtPos(0, 56);
      case 41:
         return jjStopAtPos(0, 57);
      case 98:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 99:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x1800000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10200000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x60600000000L);
      case 103:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x6000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000081000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x1e0100000L);
      case 108:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000018000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x180000000000L);
      case 112:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 114:
         return jjStartNfaWithStates_0(0, 54, 41);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x860400L);
      case 116:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x1c00005400000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000a08000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080400L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c001e4105800L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x67800012000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x610000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x60080a0000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e0100000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x600040800L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x180002000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00004000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 50);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1801418000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L);
      case 119:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 50);
         break;
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00604040000L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 50);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 50);
         break;
      case 107:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1e0000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x66000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1801000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e667fd080800L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 50);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000020000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000002000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x6600000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 50);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 50);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x6c000000L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000000L);
      case 119:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1802000000L);
      case 97:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x180001000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x206600000000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x180080000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x980180000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x6601000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x1802000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 50);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1802000000L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x6600000000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 50);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 50);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 50);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 50);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 50);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 50);
         break;
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x6600000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1802000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 50);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 50);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x1802000000L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 34, 50);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 38, 50);
         break;
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 50);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 50);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x1802000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 48, 50);
         break;
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 36, 50);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800002000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 25, 50);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 47, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 41:
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 3:
               case 51:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(51);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 103)
                     jjAddStates(0, 2);
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 101)
                     jjCheckNAdd(14);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if (curChar == 97)
                     jjCheckNAdd(32);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 108)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if (curChar == 108 && kind > 4)
                     kind = 4;
                  break;
               case 1:
               case 4:
                  if (curChar == 108)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 103 && kind > 5)
                     kind = 5;
                  break;
               case 8:
               case 11:
                  if (curChar == 97)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 114 && kind > 6)
                     kind = 6;
                  break;
               case 19:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjCheckNAdd(14);
                  break;
               case 21:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 26:
               case 29:
                  if (curChar == 110)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 108 && kind > 8)
                     kind = 8;
                  break;
               case 33:
                  if (curChar == 97)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101 && kind > 9)
                     kind = 9;
                  break;
               case 37:
               case 43:
                  if (curChar == 101)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 103)
                     jjAddStates(0, 2);
                  break;
               case 55:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 60:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 64:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   54, 61, 68, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\163\145\154\146", 
"\166\151\145\167\137\155\157\144\145", "\150\151\147\150", "\154\157\167", "\167\151\144\145", 
"\156\141\162\162\157\167", "\156\157\162\155\141\154", "\163\164\141\155\151\156\141", 
"\163\160\145\145\144", "\150\145\141\144\137\141\156\147\154\145", "\153\151\143\153", 
"\144\141\163\150", "\164\165\162\156", "\163\141\171", "\164\165\162\156\137\156\145\143\153", 
"\142\145\146\157\162\145\137\153\151\143\153\137\157\146\146", "\164\151\155\145\137\157\166\145\162", "\160\154\141\171\137\157\156", 
"\144\162\157\160\137\142\141\154\154", "\153\151\143\153\137\157\146\146\137\154", 
"\153\151\143\153\137\157\146\146\137\162", "\153\151\143\153\137\151\156\137\154", 
"\153\151\143\153\137\151\156\137\162", "\146\162\145\145\137\153\151\143\153\137\162", 
"\146\162\145\145\137\153\151\143\153\137\154", "\143\157\162\156\145\162\137\153\151\143\153\137\162", 
"\143\157\162\156\145\162\137\153\151\143\153\137\154", "\147\157\141\154\137\153\151\143\153\137\162", 
"\147\157\141\154\137\153\151\143\153\137\154", null, null, "\146\157\165\154\137\162", "\146\157\165\154\137\154", 
"\157\146\146\163\151\144\145\137\162", "\157\146\146\163\151\144\145\137\154", 
"\150\141\154\146\137\164\151\155\145", "\164\151\155\145\137\165\160", 
"\164\151\155\145\137\165\160\137\167\151\164\150\157\165\164\137\141\137\164\145\141\155", "\164\151\155\145\137\145\170\164\145\156\144\145\144", "\143", "\164", 
"\142", "\160", "\154", "\162", "\147", "\50", "\51", "\40", "\156\141\156", null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3ffffffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[69];
private final int[] jjstateSet = new int[138];
protected char curChar;
public CmdParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CmdParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 69; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
